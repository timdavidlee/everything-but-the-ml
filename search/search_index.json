{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Everything But the ML School of machine learning engineering This is an entry-level course designed to equip new machine learning engineers and data scientists with all the supporting non-ml tech skills to do technical jobs effectively. Too many a data-science contributer has flailed about trying to get into a server, or struggled at simple shell commands to peek into text files. The goal: YES : getting around file systems + moving stuff manipulating files with shell commands connecting to virtual machines deploying services common ETL mistakes SORTA : tensorflow + pytorch in the context of memory usage + file management pandas and numpy for speed + storage, not for feature development NO : model algorithms covered data science metrics or scoring discussed","title":"Home"},{"location":"#everything-but-the-ml","text":"","title":"Everything But the ML"},{"location":"#school-of-machine-learning-engineering","text":"This is an entry-level course designed to equip new machine learning engineers and data scientists with all the supporting non-ml tech skills to do technical jobs effectively. Too many a data-science contributer has flailed about trying to get into a server, or struggled at simple shell commands to peek into text files.","title":"School of machine learning engineering"},{"location":"#the-goal","text":"YES : getting around file systems + moving stuff manipulating files with shell commands connecting to virtual machines deploying services common ETL mistakes SORTA : tensorflow + pytorch in the context of memory usage + file management pandas and numpy for speed + storage, not for feature development NO : model algorithms covered data science metrics or scoring discussed","title":"The goal:"},{"location":"api/","text":"API, RESTFUL, Webhook? Dear Data scientist, There are two common situations every team + model will struggle with: Scraping or collecting enough data to train on Providing a flexible interface to show your wonderful trained model. There's a lot of the world that does not run on python! Understanding APIs will help you , get data from outside sources Designing APIs will let you share your predictive services to the world API: To retrieve information or perform a function, an API helps you communicate what you want to that system so it can understand and fulfill the request. API as a mediator between the users or clients and the resources or web services they want to get. Another advantage of an API is that you don\u2019t have to know the specifics of caching\u2014how your resource is retrieved or where it comes from. Key Vocab: Request : when a client (phone, web browser, computer) asks for data, its a request \"Send me the front page of the web\" \"What's the last thing i ordered?\" \"Can you give me my latest emails?\" Payload : when a server (bit website, centralized database) returns the answer its typically referred to as a payload Polling : when a client checks in with a server to see if any state as changed: new address for a user did a payment come through? has my package been shipped? Most common format for payloads are: raw text json [see json lesson] A great app to help troubleshoot API: Postman RESTFul Representational State Transfer (REST) Webhooks A webhook is an HTTP-based callback function that allows lightweight, event-driven communication between 2 APIs. Webhooks are used by a wide variety of web apps to receive small amounts of data from other apps. These are often referred to as reverse APIs or push APIs What are protocol buffers, and why should i care? Protocol buffers are Google's language-neutral, platform-neutral, extensible mechanism for serializing structured data \u2013 think XML, but smaller, faster, and simpler. Work with all languages Designed to make very small + compact messages gRPC https://grpc.io/ Is another way to connect services together that can run on any environment","title":"API/RESTFUL"},{"location":"api/#api-restful-webhook","text":"","title":"API, RESTFUL, Webhook?"},{"location":"api/#dear-data-scientist","text":"There are two common situations every team + model will struggle with: Scraping or collecting enough data to train on Providing a flexible interface to show your wonderful trained model. There's a lot of the world that does not run on python! Understanding APIs will help you , get data from outside sources Designing APIs will let you share your predictive services to the world","title":"Dear Data scientist,"},{"location":"api/#api","text":"To retrieve information or perform a function, an API helps you communicate what you want to that system so it can understand and fulfill the request. API as a mediator between the users or clients and the resources or web services they want to get. Another advantage of an API is that you don\u2019t have to know the specifics of caching\u2014how your resource is retrieved or where it comes from.","title":"API:"},{"location":"api/#key-vocab","text":"Request : when a client (phone, web browser, computer) asks for data, its a request \"Send me the front page of the web\" \"What's the last thing i ordered?\" \"Can you give me my latest emails?\" Payload : when a server (bit website, centralized database) returns the answer its typically referred to as a payload Polling : when a client checks in with a server to see if any state as changed: new address for a user did a payment come through? has my package been shipped?","title":"Key Vocab:"},{"location":"api/#most-common-format-for-payloads-are","text":"raw text json [see json lesson]","title":"Most common format for payloads are:"},{"location":"api/#a-great-app-to-help-troubleshoot-api","text":"Postman","title":"A great app to help troubleshoot API:"},{"location":"api/#restful","text":"Representational State Transfer (REST)","title":"RESTFul"},{"location":"api/#webhooks","text":"A webhook is an HTTP-based callback function that allows lightweight, event-driven communication between 2 APIs. Webhooks are used by a wide variety of web apps to receive small amounts of data from other apps. These are often referred to as reverse APIs or push APIs","title":"Webhooks"},{"location":"api/#what-are-protocol-buffers-and-why-should-i-care","text":"Protocol buffers are Google's language-neutral, platform-neutral, extensible mechanism for serializing structured data \u2013 think XML, but smaller, faster, and simpler. Work with all languages Designed to make very small + compact messages","title":"What are protocol buffers, and why should i care?"},{"location":"api/#grpc","text":"https://grpc.io/ Is another way to connect services together that can run on any environment","title":"gRPC"},{"location":"http/","text":"HTTP What the internet is built on Hypertext Transfer Protocol or HTTP is the text-based protocol used to pass information between browser and server over the Internet. First, let's figure out how to make a simple request of a Web server and see what it gives us back. the most common design [HTTP/1.1] was released in 1997 the more current one [HTTP/2] was released in 2015, but adoption has been slow Say we visit www.cnn.com , the computer will send the following command: GET /index.html HTTP/1.1 Host: www.cnn.com A quick example of what raw HTTP looks like using telnet On a mac, install telnet a very old and simple way of remotely connecting to another computer $ brew install telnet Step 1: Open a connection $ telnet google.com 80 >>> Trying 142.250.191.46... Connected to google.com. Escape character is '^]'. Step 2: Try a GET command $ telnet google.com 80 >>> Trying 142.250.191.46... Connected to google.com. Escape character is '^]'. $ GET / HTTP/1.1 Hit return twice Step 3: Examine the payload that has been returned GET / HTTP/1.1 HTTP/1.1 200 OK Date: Sat, 05 Nov 2022 19:12:33 GMT Expires: -1 Cache-Control: private, max-age=0 Content-Type: text/html; charset=ISO-8859-1 P3P: CP=\"This is not a P3P policy! See g.co/p3phelp for more info.\" Server: gws X-XSS-Protection: 0 X-Frame-Options: SAMEORIGIN Set-Cookie: 1P_JAR=2022-11-05-19; expires=Mon, 05-Dec-2022 19:12:33 GMT; path=/; domain=.google.com; Secure Set-Cookie: AEC=AakniGOqX69BBMv6PuuhoFDRbt7_ykU-FfvhRphXWDg8Nc0Zs2VPBceieQA; expires=Thu, 04-May-2023 19:12:33 GMT; path=/; domain=.google.com; Secure; HttpOnly; SameSite=lax Set-Cookie: NID=511=c8Hk5s4BQl-X_WJU0E43Cxgl1PpuHBPNK_NM7n1QFAwoQYn-2fa7O9leqpnjv3v610d47q47KFEU6LTNeDSdyBXTbP-J_ZtAFLpAHw9SWc8dAw8AxLXpPrlW7vshchjHbZ-1JLp9jUDevfi1hwYcpgKqBqUDzYs0q5ozYRtuiVg; expires=Sun, 07-May-2023 19:12:33 GMT; path=/; domain=.google.com; HttpOnly Accept-Ranges: none Vary: Accept-Encoding Transfer-Encoding: chunked 5b66 <!doctype html>... (then a lot of HTML + JAVASCRIPT here... ) A few observations: HTTP/1.1 200 OK : - HTTP/1.1 was returned to us - 200 - is the internet status for a successful request - OK - is another status that lets us know the request was ok. How long do clients wait for an answer or response? This will vary depending on settings, but on many internet browsers, this is typically set (and can be modified) to 30s Typical Status codes Status Codes - Wikipedia There's a lot codes, but here are some common ones: 200 OK : Standard response for successful HTTP requests 400 Bad Request : Usually this means the client asked the wrong way, or was missing a required field 403 Forbidden : Either the client hasn't logged in, or passed proper security to ask a question 404 Not Found : was asking for something that doesn't exist 500 Internal Server Error : this usually means the client did everything ok, but the server had some error in processing the question 503 Service Unavailable : this is similar, the servers could be overloaded answering everyone else's questions, and cannot get to yours","title":"HTTP"},{"location":"http/#http","text":"What the internet is built on Hypertext Transfer Protocol or HTTP is the text-based protocol used to pass information between browser and server over the Internet. First, let's figure out how to make a simple request of a Web server and see what it gives us back. the most common design [HTTP/1.1] was released in 1997 the more current one [HTTP/2] was released in 2015, but adoption has been slow Say we visit www.cnn.com , the computer will send the following command: GET /index.html HTTP/1.1 Host: www.cnn.com","title":"HTTP"},{"location":"http/#a-quick-example-of-what-raw-http-looks-like-using-telnet","text":"On a mac, install telnet a very old and simple way of remotely connecting to another computer $ brew install telnet Step 1: Open a connection $ telnet google.com 80 >>> Trying 142.250.191.46... Connected to google.com. Escape character is '^]'. Step 2: Try a GET command $ telnet google.com 80 >>> Trying 142.250.191.46... Connected to google.com. Escape character is '^]'. $ GET / HTTP/1.1 Hit return twice Step 3: Examine the payload that has been returned GET / HTTP/1.1 HTTP/1.1 200 OK Date: Sat, 05 Nov 2022 19:12:33 GMT Expires: -1 Cache-Control: private, max-age=0 Content-Type: text/html; charset=ISO-8859-1 P3P: CP=\"This is not a P3P policy! See g.co/p3phelp for more info.\" Server: gws X-XSS-Protection: 0 X-Frame-Options: SAMEORIGIN Set-Cookie: 1P_JAR=2022-11-05-19; expires=Mon, 05-Dec-2022 19:12:33 GMT; path=/; domain=.google.com; Secure Set-Cookie: AEC=AakniGOqX69BBMv6PuuhoFDRbt7_ykU-FfvhRphXWDg8Nc0Zs2VPBceieQA; expires=Thu, 04-May-2023 19:12:33 GMT; path=/; domain=.google.com; Secure; HttpOnly; SameSite=lax Set-Cookie: NID=511=c8Hk5s4BQl-X_WJU0E43Cxgl1PpuHBPNK_NM7n1QFAwoQYn-2fa7O9leqpnjv3v610d47q47KFEU6LTNeDSdyBXTbP-J_ZtAFLpAHw9SWc8dAw8AxLXpPrlW7vshchjHbZ-1JLp9jUDevfi1hwYcpgKqBqUDzYs0q5ozYRtuiVg; expires=Sun, 07-May-2023 19:12:33 GMT; path=/; domain=.google.com; HttpOnly Accept-Ranges: none Vary: Accept-Encoding Transfer-Encoding: chunked 5b66 <!doctype html>... (then a lot of HTML + JAVASCRIPT here... ) A few observations: HTTP/1.1 200 OK : - HTTP/1.1 was returned to us - 200 - is the internet status for a successful request - OK - is another status that lets us know the request was ok.","title":"A quick example of what raw HTTP looks like using telnet"},{"location":"http/#how-long-do-clients-wait-for-an-answer-or-response","text":"This will vary depending on settings, but on many internet browsers, this is typically set (and can be modified) to 30s","title":"How long do clients wait for an answer or response?"},{"location":"http/#typical-status-codes","text":"Status Codes - Wikipedia There's a lot codes, but here are some common ones: 200 OK : Standard response for successful HTTP requests 400 Bad Request : Usually this means the client asked the wrong way, or was missing a required field 403 Forbidden : Either the client hasn't logged in, or passed proper security to ask a question 404 Not Found : was asking for something that doesn't exist 500 Internal Server Error : this usually means the client did everything ok, but the server had some error in processing the question 503 Service Unavailable : this is similar, the servers could be overloaded answering everyone else's questions, and cannot get to yours","title":"Typical Status codes"},{"location":"sys/","text":"","title":"FileSystems"},{"location":"airflow/intro/","text":"Just enough Airflow Why airflow for data scientists? Just Enough Airflow","title":"Airflow"},{"location":"airflow/intro/#just-enough-airflow","text":"","title":"Just enough Airflow"},{"location":"airflow/intro/#why-airflow-for-data-scientists","text":"","title":"Why airflow for data scientists?"},{"location":"airflow/intro/#just-enough-airflow_1","text":"","title":"Just Enough Airflow"},{"location":"aws/boto/","text":"","title":"Boto Library"},{"location":"aws/buckets/","text":"","title":"Buckets"},{"location":"bash/linux-types/","text":"Common Types of Linux","title":"Types of Linux"},{"location":"bash/linux-types/#common-types-of-linux","text":"","title":"Common Types of Linux"},{"location":"bash/piping/","text":"Command Line \"Fu\" A lot of this content was sourced from: https://github.com/parrt/msds692/blob/master/notes/bashcsv.ipynb https://bconnelly.net/posts/working_with_csvs_on_the_command_line/","title":"Command Line \"Fu\""},{"location":"bash/piping/#command-line-fu","text":"A lot of this content was sourced from: https://github.com/parrt/msds692/blob/master/notes/bashcsv.ipynb https://bconnelly.net/posts/working_with_csvs_on_the_command_line/","title":"Command Line \"Fu\""},{"location":"bash/quality-of-life/","text":"Quality of Life Shell Packages This assumes that you should have brew installed, a macOSX package manager. A lot of this is courtesy of this great github brew install bash-completion git brew install --cask \\ qlcolorcode \\ qlstephen \\ qlmarkdown \\ quicklook-json \\ qlprettypatch \\ quicklook-csv \\ betterzip \\ webpquicklook \\ suspicious-package","title":"Quality of Life Installs"},{"location":"bash/quality-of-life/#quality-of-life-shell-packages","text":"This assumes that you should have brew installed, a macOSX package manager. A lot of this is courtesy of this great github brew install bash-completion git brew install --cask \\ qlcolorcode \\ qlstephen \\ qlmarkdown \\ quicklook-json \\ qlprettypatch \\ quicklook-csv \\ betterzip \\ webpquicklook \\ suspicious-package","title":"Quality of Life Shell Packages"},{"location":"data-formats/csv/","text":"The big boring article on comma-separated files (CSVs) and their cousins TSV (tab-separated-files) CSV At its core, its a specific text format to represent a table , or tabular data . So given the table below: Product Date Name Notes Coffee 2011-02-05 Stark's Beans a good cup of coffee Gloves 2011-02-07 Harry's Hands Portal Gun 2032-02-05 Rick's Portal Gun found this in on the floor The corresponding text file would look like this: Product,Date,Name,Notes Coffee,2011-02-05,\"Stark's Beans\",\"a good cup of coffee\" Gloves,2011-02-07,\"Harry's Hands\", \"Portal Gun\",2032-02-05,\"Rick's Portal Gun\",\"found this in on the floor\" Observations The lines are 1:1 with the table Note that the values in each column are separated with commas , Any text with spaces in the phrase are surrounded by quotes (single or double) \" \" TSV Given the same table above, the tab separated version would look like the following: Product Date Name Notes Coffee 2011-02-05 \"Stark's Beans\" \"a good cup of coffee\" Gloves 2011-02-07 \"Harry's Hands\" \"Portal Gun\" 2032-02-05 \"Rick's Portal Gun\" \"found this in on the floor\" And what can't be visually seen is the \\t characters separating the values in each row: Product\\tDate\\tName\\tNotes Coffee\\t2011-02-05\\t\"Stark's Beans\"\\t\"a good cup of coffee\" Gloves\\t2011-02-07\\t\"Harry's Hands\"\\t \"Portal Gun\"\\t2032-02-05\\t\"Rick's Portal Gun\"\\t\"found this in on the floor\" Perils, Troubles, and Caveats 1. Not Quoted correctly: One of the biggest issues with the file format is when the values conflict with delimiter. Message Date So, I like didn't, have enough patience, to write, this, correctly 2011-02-05 When the CSV format Message,Date So, I like didn't, have enough patience, to write, this, correctly,2011-02-05 Note that the quoting wasn't added correctly, so the computer program will try to do the following: Message Date So I like didn't have enough patience to write this correctly 2011-02-05 And typically any method being used to read the file will error out. Python notes on CSV Base python csv library docs The csv module defines the following constants: csv.QUOTE_ALL Instructs writer objects to quote all fields. csv.QUOTE_MINIMAL Instructs writer objects to only quote those fields which contain special characters such as delimiter, quotechar or any of the characters in lineterminator. csv.QUOTE_NONNUMERIC Instructs writer objects to quote all non-numeric fields. Instructs the reader to convert all non-quoted fields to type float. csv.QUOTE_NONE Instructs writer objects to never quote fields. When the current delimiter occurs in output data it is preceded by the current escapechar character. If escapechar is not set, the writer will raise Error if any characters that require escaping are encountered. Example: import csv import pandas as pd df = pd.DataFrame([ [1, 2, \"a\", \"bobby, the giant\"], [2, 3, \"b\", \"I, uh, think, uh\"], [4, 6, \"f\", \"eee\"], ]) df.to_csv(quoting=csv.QUOTE_NONE, quotechar='\"', escapechar=\"\\\\\") >>> ',0,1,2,3\\n0,1,2,a,bobby\\\\, the giant\\n1,2,3,b,I\\\\, uh\\\\, think\\\\, uh\\n2,4,6,f,eee\\n'","title":"CSV"},{"location":"data-formats/csv/#the-big-boring-article-on-comma-separated-files-csvs","text":"","title":"The big boring article on comma-separated files (CSVs)"},{"location":"data-formats/csv/#and-their-cousins-tsv-tab-separated-files","text":"","title":"and their cousins TSV (tab-separated-files)"},{"location":"data-formats/csv/#csv","text":"At its core, its a specific text format to represent a table , or tabular data . So given the table below: Product Date Name Notes Coffee 2011-02-05 Stark's Beans a good cup of coffee Gloves 2011-02-07 Harry's Hands Portal Gun 2032-02-05 Rick's Portal Gun found this in on the floor The corresponding text file would look like this: Product,Date,Name,Notes Coffee,2011-02-05,\"Stark's Beans\",\"a good cup of coffee\" Gloves,2011-02-07,\"Harry's Hands\", \"Portal Gun\",2032-02-05,\"Rick's Portal Gun\",\"found this in on the floor\" Observations The lines are 1:1 with the table Note that the values in each column are separated with commas , Any text with spaces in the phrase are surrounded by quotes (single or double) \" \"","title":"CSV"},{"location":"data-formats/csv/#tsv","text":"Given the same table above, the tab separated version would look like the following: Product Date Name Notes Coffee 2011-02-05 \"Stark's Beans\" \"a good cup of coffee\" Gloves 2011-02-07 \"Harry's Hands\" \"Portal Gun\" 2032-02-05 \"Rick's Portal Gun\" \"found this in on the floor\" And what can't be visually seen is the \\t characters separating the values in each row: Product\\tDate\\tName\\tNotes Coffee\\t2011-02-05\\t\"Stark's Beans\"\\t\"a good cup of coffee\" Gloves\\t2011-02-07\\t\"Harry's Hands\"\\t \"Portal Gun\"\\t2032-02-05\\t\"Rick's Portal Gun\"\\t\"found this in on the floor\"","title":"TSV"},{"location":"data-formats/csv/#perils-troubles-and-caveats","text":"","title":"Perils, Troubles, and Caveats"},{"location":"data-formats/csv/#1-not-quoted-correctly","text":"One of the biggest issues with the file format is when the values conflict with delimiter. Message Date So, I like didn't, have enough patience, to write, this, correctly 2011-02-05 When the CSV format Message,Date So, I like didn't, have enough patience, to write, this, correctly,2011-02-05 Note that the quoting wasn't added correctly, so the computer program will try to do the following: Message Date So I like didn't have enough patience to write this correctly 2011-02-05 And typically any method being used to read the file will error out.","title":"1. Not Quoted correctly:"},{"location":"data-formats/csv/#python-notes-on-csv","text":"Base python csv library docs The csv module defines the following constants: csv.QUOTE_ALL Instructs writer objects to quote all fields. csv.QUOTE_MINIMAL Instructs writer objects to only quote those fields which contain special characters such as delimiter, quotechar or any of the characters in lineterminator. csv.QUOTE_NONNUMERIC Instructs writer objects to quote all non-numeric fields. Instructs the reader to convert all non-quoted fields to type float. csv.QUOTE_NONE Instructs writer objects to never quote fields. When the current delimiter occurs in output data it is preceded by the current escapechar character. If escapechar is not set, the writer will raise Error if any characters that require escaping are encountered. Example: import csv import pandas as pd df = pd.DataFrame([ [1, 2, \"a\", \"bobby, the giant\"], [2, 3, \"b\", \"I, uh, think, uh\"], [4, 6, \"f\", \"eee\"], ]) df.to_csv(quoting=csv.QUOTE_NONE, quotechar='\"', escapechar=\"\\\\\") >>> ',0,1,2,3\\n0,1,2,a,bobby\\\\, the giant\\n1,2,3,b,I\\\\, uh\\\\, think\\\\, uh\\n2,4,6,f,eee\\n'","title":"Python notes on CSV"},{"location":"data-formats/json/","text":"","title":"json"},{"location":"data-formats/parquet/","text":"","title":"parquet"},{"location":"data-formats/pickle/","text":"","title":"pickle"},{"location":"data-formats/text-encoding/","text":"Text-Encoding Latin1 UTF-8","title":"Text-Encoding"},{"location":"data-formats/text-encoding/#text-encoding","text":"","title":"Text-Encoding"},{"location":"data-formats/text-encoding/#latin1","text":"","title":"Latin1"},{"location":"data-formats/text-encoding/#utf-8","text":"","title":"UTF-8"},{"location":"docker/basics/","text":"","title":"Docker Basics"},{"location":"docker/building_images/","text":"","title":"Building Images"},{"location":"docker/intro/","text":"What is Docker? From the website : Docker is an open platform for developing, shipping, and running applications. Docker enables you to separate your applications from your infrastructure so you can deliver software quickly. With Docker, you can manage your infrastructure in the same ways you manage your applications. By taking advantage of Docker\u2019s methodologies for shipping, testing, and deploying code quickly, you can significantly reduce the delay between writing code and running it in production. The key benefit of docker is containers that can wrap little: applications specific versions of applications different operating systems Why is important for data scientists? Two fold: chances are the model + algorithm that will be deployed will be wrapped in a docker + used in production Makes it 100x easier to borrow research code (older) without having to update all the dependencies needed to run. this could also be done with a different git clone, but many of these repos are tied to specific versions of pytorch , tensorflow , or other frameworks Installation Visit the following website: https://docs.docker.com/desktop/install/mac-install/ even easier: brew install --cask docker Some samples We can pull various versions of applications + actually have them run at the same time! docker pull alpine:latest docker pull ubuntu:18.04 # old version docker pull ubuntu:20.04 # newer version docker pull python:3.8 # old version docker pull python:3.10 # new version Benefits : - No longer need to install + uninstall various versions locally, (potentially messing up system tools) - if supporting multiple versions, (want to test installations), can download the containers + install on various versions to ensure the behavior is expected","title":"Why docker?"},{"location":"docker/intro/#what-is-docker","text":"From the website : Docker is an open platform for developing, shipping, and running applications. Docker enables you to separate your applications from your infrastructure so you can deliver software quickly. With Docker, you can manage your infrastructure in the same ways you manage your applications. By taking advantage of Docker\u2019s methodologies for shipping, testing, and deploying code quickly, you can significantly reduce the delay between writing code and running it in production. The key benefit of docker is containers that can wrap little: applications specific versions of applications different operating systems","title":"What is Docker?"},{"location":"docker/intro/#why-is-important-for-data-scientists","text":"Two fold: chances are the model + algorithm that will be deployed will be wrapped in a docker + used in production Makes it 100x easier to borrow research code (older) without having to update all the dependencies needed to run. this could also be done with a different git clone, but many of these repos are tied to specific versions of pytorch , tensorflow , or other frameworks","title":"Why is important for data scientists?"},{"location":"docker/intro/#installation","text":"Visit the following website: https://docs.docker.com/desktop/install/mac-install/ even easier: brew install --cask docker","title":"Installation"},{"location":"docker/intro/#some-samples","text":"We can pull various versions of applications + actually have them run at the same time! docker pull alpine:latest docker pull ubuntu:18.04 # old version docker pull ubuntu:20.04 # newer version docker pull python:3.8 # old version docker pull python:3.10 # new version Benefits : - No longer need to install + uninstall various versions locally, (potentially messing up system tools) - if supporting multiple versions, (want to test installations), can download the containers + install on various versions to ensure the behavior is expected","title":"Some samples"},{"location":"git/branches/","text":"","title":"Contributing"},{"location":"git/cloning-basics/","text":"","title":"Getting other's code"},{"location":"git/repo-level-actions/","text":"","title":"Repo-Level Commands"},{"location":"python/collections/","text":"","title":"Collections"},{"location":"python/dataclasses/","text":"About Dataclasses","title":"Data Classes"},{"location":"python/dataclasses/#about-dataclasses","text":"","title":"About Dataclasses"},{"location":"python/generators/","text":"","title":"Generators"},{"location":"python/linting/","text":"","title":"Type Hinting"},{"location":"python/list_comprehensions/","text":"","title":"List Comprehensions"},{"location":"python/parallel_processing/","text":"","title":"Parallel Processing"},{"location":"python/pip/","text":"","title":"Managing Pip"},{"location":"python/pytest/","text":"","title":"Testing"},{"location":"python/versions-and-envs/","text":"","title":"Versions and Envs"},{"location":"ssh/let-me-in/","text":"SSH","title":"Getting into a VM"},{"location":"ssh/let-me-in/#ssh","text":"","title":"SSH"},{"location":"ssh/tunneling/","text":"","title":"Tunneling to a VM"},{"location":"tools-installs/keyboard-shortcuts/","text":"Keyboard Shortcuts These are keyboard shortcuts that will help in any terminal, in many text editors etc. CTRL + A : Move to the start of a line CTRL + E : Move to the end of a line Option + F : Move forward a word Option + B : Move backwards a word CTRL + Left/Right Arrow : Moving word by word horizontally","title":"Keyboard Shortcuts"},{"location":"tools-installs/keyboard-shortcuts/#keyboard-shortcuts","text":"These are keyboard shortcuts that will help in any terminal, in many text editors etc. CTRL + A : Move to the start of a line CTRL + E : Move to the end of a line Option + F : Move forward a word Option + B : Move backwards a word CTRL + Left/Right Arrow : Moving word by word horizontally","title":"Keyboard Shortcuts"},{"location":"tools-installs/terminal/","text":"MacOSX - Terminal Bash autocomplete brew install bash-completion Your ./bash_profile will need to be updated below: echo \"[ -f /usr/local/etc/bash_completion ] && . /usr/local/etc/bash_completion\" >> ~/.bash_profile Default MacOSX Terminal There's nothing wrong the current terminal iTerm - Terminal Product Link . Why? split pane view search will highlight all words paste history auto-complete Can also be installed with brew here. brew install cask iterm2 Useful Shortcuts There are many useful shortcuts for iterm , but for beginners, here's a few: command + d : splits the current pane into left and right command + shift + d : splits the current pane into top + bottm command + t : start a new tab command + w : close a tab command + enter : full screen command + shift enter : full-size a pane / screen Command History Ctrl R : opens a prompt, then type the search term, keep pressing Ctrl R to cycle through results Warp Terminal https://www.warp.dev/ This is a newer terminal that came out in 2021~ish and is built on rust (programming language) . Has a lot more modern features: shows visual command history (and output) great a suggesting snippets you already typed great at showing docs for params you might have forgotten","title":"MacOSX - Terminal"},{"location":"tools-installs/terminal/#macosx-terminal","text":"","title":"MacOSX - Terminal"},{"location":"tools-installs/terminal/#bash-autocomplete","text":"brew install bash-completion Your ./bash_profile will need to be updated below: echo \"[ -f /usr/local/etc/bash_completion ] && . /usr/local/etc/bash_completion\" >> ~/.bash_profile","title":"Bash autocomplete"},{"location":"tools-installs/terminal/#default-macosx-terminal","text":"There's nothing wrong the current terminal","title":"Default MacOSX Terminal"},{"location":"tools-installs/terminal/#iterm-terminal","text":"Product Link . Why? split pane view search will highlight all words paste history auto-complete Can also be installed with brew here. brew install cask iterm2 Useful Shortcuts There are many useful shortcuts for iterm , but for beginners, here's a few: command + d : splits the current pane into left and right command + shift + d : splits the current pane into top + bottm command + t : start a new tab command + w : close a tab command + enter : full screen command + shift enter : full-size a pane / screen Command History Ctrl R : opens a prompt, then type the search term, keep pressing Ctrl R to cycle through results","title":"iTerm - Terminal"},{"location":"tools-installs/terminal/#warp-terminal","text":"https://www.warp.dev/ This is a newer terminal that came out in 2021~ish and is built on rust (programming language) . Has a lot more modern features: shows visual command history (and output) great a suggesting snippets you already typed great at showing docs for params you might have forgotten","title":"Warp Terminal"},{"location":"tools-installs/text-editors/","text":"VIM Sublime Text Editor Notepad++","title":"VIM"},{"location":"tools-installs/text-editors/#vim","text":"","title":"VIM"},{"location":"tools-installs/text-editors/#sublime-text-editor","text":"","title":"Sublime Text Editor"},{"location":"tools-installs/text-editors/#notepad","text":"","title":"Notepad++"},{"location":"vim/basics/","text":"Just Enough VIM text editing By default vi will be on any system that is tunneled into. will install some upgrades to make ending locally a bit better: git clone https://github.com/amix/vimrc.git ~/.vim_runtime && \\ sh ~/.vim_runtime/install_awesome_vimrc.sh $ vi At a minim There are two modes","title":"Basic file editng"},{"location":"vim/basics/#just-enough-vim-text-editing","text":"By default vi will be on any system that is tunneled into. will install some upgrades to make ending locally a bit better: git clone https://github.com/amix/vimrc.git ~/.vim_runtime && \\ sh ~/.vim_runtime/install_awesome_vimrc.sh $ vi At a minim There are two modes","title":"Just Enough VIM text editing"}]}